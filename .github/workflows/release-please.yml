on:
  push:
    branches: ["main"]

permissions:
  contents: write
  pull-requests: write
  packages: write

env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}

name: release-please

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      web--tag_name: ${{ steps.release.outputs['apps/web--tag_name']}}
      web--version: ${{ steps.release.outputs['apps/web--version']}}
      web--release_created: ${{ steps.release.outputs['apps/web--release_created']}}
      web-path: ${{ steps.release.outputs['apps/web--path']}}
      paths_released: ${{ steps.release.outputs.paths_released}}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.TECK_WEBSITE_PAT }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
      - name: Print release outputs for debugging
        continue-on-error: true
        run: |
          echo "Release outputs:"
          echo "${{ toJson(steps.release.outputs) }}"
  release-web:
    if: ${{needs.release-please.outputs.web--release_created}}
    runs-on: ubuntu-latest
    needs: release-please

    strategy:
      fail-fast: false
      matrix:
        platform: [linux]
        architecture: [amd64, arm64]

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}/${{ matrix.architecture }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Migrate payload
        run: pnpm payload:migrate
        env:
          DATABASE_URI: 'postgres://postgres:postgres@localhost:5432/postgres'
          PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/web
      - name: Log in to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - id: string
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.REPOSITORY }}
      - name: Build and push container image to registry
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}/${{ matrix.architecture }}
          # OCI compliant when set to false, should fix unknown/unknown arch
          # push: ${{ github.event_name != 'pull_request' }}
          context: .
          file: apps/web/Dockerfile
          tags: ${{ env.REGISTRY }}/${{ steps.string.outputs.lowercase }}/web
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ steps.string.outputs.lowercase }}/web,push-by-digest=true,name-canonical=true,push=true
          build-args: |
            "DATABASE_URI=postgres://postgres:postgres@172.17.0.1:5432/postgres"
            "PAYLOAD_SECRET=${{ secrets.PAYLOAD_SECRET }}"
      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1
  merge:
    runs-on: ubuntu-latest
    needs:
      - release-web
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Log in to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/web
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.web--version }}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=tag
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.REPOSITORY }}/web@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/web:${{ steps.meta.outputs.version }}
