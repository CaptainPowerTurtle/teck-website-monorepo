name: Preview Vault Management

on:
  pull_request:
    types: [labeled, unlabeled, closed]
    branches:
      - main
      - feature/**
      - bugfix/**
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - 'deployment/**'

permissions:
  contents: read
  pull-requests: read
  id-token: write  # Required for OIDC
  packages: write  # Required for image cleanup

jobs:
  manage-vault-secrets:
    runs-on: ubuntu-latest
    if: |
      (github.event.action == 'unlabeled' && github.event.label.name == 'preview') ||
      (github.event.action == 'closed' && contains(github.event.pull_request.labels.*.name, 'preview'))
    steps:
      - name: Wait before running cleanup
        run: sleep 60

      - uses: actions/checkout@v4
      
      - name: Install Vault CLI
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install vault
      
      - name: Setup Vault with JWT
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: jwt
          role: github-actions
          exportToken: true

      - name: Delete Preview Secrets
        run: |
          PR_NUMBER=${{ github.event.number }}
          NAMESPACE="preview-${PR_NUMBER}"
          echo "Cleaning up all preview secrets for: teck-website/${NAMESPACE}"
          echo "Using Vault server: ${VAULT_ADDR}"

          # Explicitly delete known keys under the namespace
          for key in redis postgres web; do
            echo "Explicitly deleting: teck-website/${NAMESPACE}/$key"
            vault kv get "teck-website/${NAMESPACE}/$key" || echo "No secret found at teck-website/${NAMESPACE}/$key"

            # Find all versions for the key
            versions=$(vault kv metadata get "teck-website/${NAMESPACE}/$key" 2>/dev/null | grep '^  version:' | awk '{print $2}')
            if [ -z "$versions" ]; then
              # Try to parse all available versions from the metadata output
              versions=$(vault kv metadata get "teck-website/${NAMESPACE}/$key" 2>/dev/null | grep -E '^[ ]+[0-9]+:' | awk -F: '{print $1}' | tr -d ' ' | tr '\n' ',')
              versions=${versions%,}
            fi
            if [ -n "$versions" ]; then
              echo "Destroying all versions: $versions"
              vault kv destroy "teck-website/${NAMESPACE}/$key" -versions="$versions" || true
            else
              echo "No versions found to destroy for teck-website/${NAMESPACE}/$key"
            fi

            vault kv metadata delete "teck-website/${NAMESPACE}/$key" || true
            vault kv get "teck-website/${NAMESPACE}/$key" || echo "No secret found at teck-website/${NAMESPACE}/$key"
          done

          # Delete the preview folder metadata itself
          echo "Deleting preview folder metadata: teck-website/${NAMESPACE}"
          vault kv metadata delete "teck-website/${NAMESPACE}" || true
          echo "Cleaned up entire preview folder: teck-website/${NAMESPACE}"
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch multi-platform digests for all SHA-only tags
        id: multi-arch-digests
        run: |
          IMAGE="ghcr.io/captainpowerturtle/teck-website-monorepo/web"
          DIGESTS=""
          SHA_TAGS=$(gh api users/CaptainPowerTurtle/packages/container/teck-website-monorepo%2Fweb/versions | jq -r '.[] | select(.metadata.container.tags? and (.metadata.container.tags | length == 1) and (.metadata.container.tags[0] | test("^[a-f0-9]{40}$"))) | .metadata.container.tags[0]')
          echo "Found SHA tags:"
          echo "$SHA_TAGS"
          for SHA in $SHA_TAGS; do
            ARCH_DIGESTS=$(docker manifest inspect $IMAGE:$SHA | jq -r '.[0].manifests[].digest' | paste -s -d ' ' -)
            DIGESTS="$DIGESTS$ARCH_DIGESTS,"
          done
          DIGESTS=$(echo $DIGESTS | sed 's/,$//')
          echo "multi-arch-digests=$DIGESTS" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Container Retention Policy
        uses: snok/container-retention-policy@v3.0.0
        with:
          account: user
          image-names: teck-website-monorepo/web
          tag-selection: both
          image-tags: 'preview-${{ github.event.number }} * ![0-9]*.[0-9]*.[0-9]* !latest'
          cut-off: 0d
          token: ${{ secrets.GITHUB_TOKEN }}
          skip-shas: ${{ steps.multi-arch-digests.outputs.multi-arch-digests }}
          dry-run: false
